name: "nuke"
description: "Builds and tests a .NET project"
inputs:
  directory:
    description: "Project directory"
    required: true
  Compile:
    description: "Flag indicating if Compile task is to be run"
    default: "false"
    required: false
  Publish:
    description: "Flag indicating if Publish task is to be run after the Unit&Integration tests"
    default: "false"
    required: false
  Pack:
    description: "Flag indicating if Pack task is to be run after the Unit&Integration tests"
    default: "false"
    required: false
  Push:
    description: "Flag indicating if Push task is to be run after the Pack task"
    default: "false"
    required: false
  UnitTests:
    description: "Flag indicating if UnitTests task is to be run"
    default: "false"
    required: false
  IntegrationTests:
    description: "Flag indicating if IntegrationTests task is to be run"
    default: "false"
    required: false
  NuGetApiUrl:
    description: "NuGet Url"
    default: "false"
    required: false
  NuGetApiKey:
    description: "NuGet API Key"
    default: "false"
    required: false
outputs:
  test-results:
    description: Location of the test results file
    value: ${{ steps.dotnet-test.outputs.test-results }}
  test-results-title:
    description: Title of the test results
    value: ${{ steps.dotnet-test.outputs.test-results-title }}
runs:
  using: "composite"
  steps:
    - run: |
        dotnet tool restore
        dotnet nuget list source
      name: dotnet tool restore
      working-directory: ${{ inputs.directory }}
      shell: bash
    - name: dotnet nuke Compile
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        PREDICATE=${{ inputs.Compile }}
        if [ $PREDICATE == 'true' ]
        then
          dotnet nuke Compile
        else
          echo "Compile skipped"
        fi
    - name: dotnet nuke UnitTests
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        PREDICATE=${{ inputs.UnitTests }}
        if [ $PREDICATE == 'true' ]
        then
          dotnet nuke UnitTests
        else
          echo "UnitTests skipped"
        fi
    - name: dotnet nuke IntegrationTests
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        PREDICATE=${{ inputs.IntegrationTests }}
        if [ $PREDICATE == 'true' ]
        then
          dotnet nuke IntegrationTests
        else
          echo "IntegrationTests skipped"
        fi
    - name: dotnet nuke Publish
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        PREDICATE=${{ inputs.Publish }}
        if [ $PREDICATE == 'true' ]
        then
          dotnet nuke Publish
        else
          echo "Publish skipped"
        fi
    - name: dotnet nuke Pack
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        PREDICATE=${{ inputs.Pack }}
        if [ $PREDICATE == 'true' ]
        then
          dotnet nuke Pack
        else
          echo "Pack skipped"
        fi
    - name: dotnet nuke Push
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        PREDICATE=${{ inputs.Push }}
        if [ $PREDICATE == 'true' ]
        then
          dotnet nuke --target Push --nuget-api-url ${{ inputs.NuGetApiUrl }} --nuget-api-key ${{ inputs.NuGetApiKey }}
        else
          echo "Push skipped"
        fi